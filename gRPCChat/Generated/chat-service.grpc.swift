//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chat-service new.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClient`, then call methods of this protocol to make API calls.
internal protocol Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientInterceptorFactoryProtocol? { get }

  func hello(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>

  func getHistory(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History>

  func write(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult>

  func listen(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User,
    callOptions: CallOptions?,
    handler: @escaping (Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message) -> Void
  ) -> ServerStreamingCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message>
}

extension Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientProtocol {
  internal var serviceName: String {
    return "com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat"
  }

  ///
  /// Call to server to get userId.
  /// returns genereated [User] from server.
  ///
  /// - Parameters:
  ///   - request: Request to send to hello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hello(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User> {
    return self.makeUnaryCall(
      path: "/com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat/hello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehelloInterceptors() ?? []
    )
  }

  ///
  /// Returns to user.
  ///
  /// - Parameters:
  ///   - request: Request to send to getHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getHistory(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History> {
    return self.makeUnaryCall(
      path: "/com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat/getHistory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetHistoryInterceptors() ?? []
    )
  }

  ///
  ///  Rpc function to write message into Room.
  ///
  /// - Parameters:
  ///   - request: Request to send to write.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func write(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult> {
    return self.makeUnaryCall(
      path: "/com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat/write",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewriteInterceptors() ?? []
    )
  }

  ///
  /// RPC to listen room chat messages from stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to listen.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listen(
    _ request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User,
    callOptions: CallOptions? = nil,
    handler: @escaping (Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message) -> Void
  ) -> ServerStreamingCall<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message> {
    return self.makeServerStreamingCall(
      path: "/com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat/listen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelistenInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'hello'.
  func makehelloInterceptors() -> [ClientInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>]

  /// - Returns: Interceptors to use when invoking 'getHistory'.
  func makegetHistoryInterceptors() -> [ClientInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History>]

  /// - Returns: Interceptors to use when invoking 'write'.
  func makewriteInterceptors() -> [ClientInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult>]

  /// - Returns: Interceptors to use when invoking 'listen'.
  func makelistenInterceptors() -> [ClientInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message>]
}

internal final class Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClient: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientInterceptorFactoryProtocol?

  /// Creates a client for the com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatProvider: CallHandlerProvider {
  var interceptors: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatServerInterceptorFactoryProtocol? { get }

  ///
  /// Call to server to get userId
  func hello(request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>

  func getHistory(request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History>

  func write(request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult>

  func listen(request: Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, context: StreamingResponseCallContext<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message>) -> EventLoopFuture<GRPCStatus>
}

extension Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatProvider {
  internal var serviceName: Substring { return "com.santiihoyos.grpcchat.data.grpc.model.grpcchat.Chat" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "hello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello>(),
        responseSerializer: ProtobufSerializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>(),
        interceptors: self.interceptors?.makehelloInterceptors() ?? [],
        userFunction: self.hello(request:context:)
      )

    case "getHistory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>(),
        responseSerializer: ProtobufSerializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History>(),
        interceptors: self.interceptors?.makegetHistoryInterceptors() ?? [],
        userFunction: self.getHistory(request:context:)
      )

    case "write":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage>(),
        responseSerializer: ProtobufSerializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult>(),
        interceptors: self.interceptors?.makewriteInterceptors() ?? [],
        userFunction: self.write(request:context:)
      )

    case "listen":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>(),
        responseSerializer: ProtobufSerializer<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message>(),
        interceptors: self.interceptors?.makelistenInterceptors() ?? [],
        userFunction: self.listen(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_ChatServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'hello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makehelloInterceptors() -> [ServerInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Hello, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User>]

  /// - Returns: Interceptors to use when handling 'getHistory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetHistoryInterceptors() -> [ServerInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_History>]

  /// - Returns: Interceptors to use when handling 'write'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makewriteInterceptors() -> [ServerInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_WriteMessage, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_MessageResult>]

  /// - Returns: Interceptors to use when handling 'listen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makelistenInterceptors() -> [ServerInterceptor<Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_User, Com_Santiihoyos_Grpcchat_Data_Grpc_Model_Grpcchat_Message>]
}
